# .github/workflows/python-app.yml
name: Python application CI/CD

on:
  push:
    branches: [ "main"] # Se dispara en push a las ramas main o develop
  pull_request:
    branches: [ "main"] # Se dispara en PRs a las ramas main o develop

jobs:
  build: # Nombre del job
    runs-on: ubuntu-latest # El runner

    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4 # Paso 1: Clona el repositorio en el runner

    - name: Set up Python ${{ matrix.python-version }} # Paso 2: Configura el entorno Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # Opcional: Cachea las dependencias de pip para acelerar futuras ejecuciones.

    - name: Install dependencies # Paso 3: Instala las dependencias del proyecto y herramientas de testing
      run: |
        python -m pip install --upgrade pip

        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov

    - name: Run tests with pytest # Paso 4: Ejecuta Pytest
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/src
        pytest --junitxml=test-results.xml --cov=./src --cov-report=xml

    - name: Publish Test Results # Paso 5 (Opcional): Publica los resultados de los tests en GitHub
      if: always() # Asegura que este paso se ejecute incluso si las pruebas fallan
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        files: test-results.xml # Usa el archivo generado por Pytest

    - name: Upload coverage to Codecov # Paso 6 (Opcional): Sube el reporte de cobertura a Codecov (si lo usas)
      if: success() # Solo si las pruebas pasaron
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml # Archivo generado por pytest-cov
        # token: ${{ secrets.CODECOV_TOKEN }} # Si necesitas un token, config√∫ralo en secrets de GitHub