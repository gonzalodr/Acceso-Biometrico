# .github/workflows/main.yml
name: Pruebas Python

on:
  push:
    branches:
      - main
      - Gonzalo
      - DEVJAVIER-QA
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest

    # --- SERVICIO MySQL PARA CI ---
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE:      ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER:          ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD:      ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    # --------------------------------

    steps:
      - uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Instalar deps. del sistema y mysql-client
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1 mesa-utils mysql-client

      - name: Instalar deps. de Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Esperar a que MySQL est√© listo
        run: |
          for i in $(seq 1 30); do
            if mysql -h 127.0.0.1 -u${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e "SELECT 1;" 2>/dev/null; then
              echo "MySQL listo."
              break
            fi
            echo "Esperando MySQL... ($i/30)"
            sleep 2
          done
          if [ $i -eq 30 ]; then
            echo "Error: MySQL no arranc√≥ a tiempo."
            exit 1
          fi

      - name: Importar base de datos desde backup SQL
        env:
          DB_HOST:     127.0.0.1
          DB_USER:     ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        run: |
          BACKUP="backup/accesobiometrico_v5.0.sql"
          if [ ! -f "$BACKUP" ]; then
            echo "‚ö†Ô∏è $BACKUP no encontrado."
            exit 1
          fi
          mysql -h "$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" "$DB_DATABASE" < "$BACKUP"

      - name: Ejecutar tests con Pytest
        env:
          DB_HOST:     127.0.0.1
          DB_USER:     ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        run: |
          pytest tests/unitarias/test_departamento_services.py -v
          pytest -q tests/seguridad/test_seguridad_departamento.py

      - name: Ejecutar pruebas de carga con Locust
        env:
          DB_HOST:     127.0.0.1
          DB_USER:     ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        run: |
          mkdir -p output
          locust -f tests/rendimiento/test_rendimiento_departamento.py \
            --headless -u 150 -r 10 --run-time 1m --csv=output/resultados

      - name: Verificar errores en Locust
        run: |
          if [ -f output/resultados_failures.csv ] && grep -q '[1-9]' output/resultados_failures.csv; then
            echo "‚ùå Errores durante la carga."
            cat output/resultados_failures.csv
            exit 1
          fi
          echo "‚úÖ Prueba de carga sin errores."

      - name: Validar rendimiento (promedio)
        run: |
          avg=$(awk -F',' '$1 ~ /Insertar Perfil/ {print $5}' output/resultados_stats.csv | tail -n1)
          echo "‚è± Avg response time: $avg ms"
          if (( $(echo "$avg > 500" | bc -l) )); then
            echo "‚ùå Promedio > 500ms"
            exit 1
          fi

      - name: Guardar resultados de Locust
        uses: actions/upload-artifact@v4
        with:
          name: resultados-locust
          path: output/

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Auto-merge en main si todo pasa ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: Auto-merge to main
        if: >
          success() &&
          (github.ref == 'refs/heads/Gonzalo' || github.ref == 'refs/heads/DEVJAVIER-QA')
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            try {
              await github.rest.repos.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: 'main',
                head: branch
              });
              console.log(`Merge ${branch} ‚Üí main OK`);
            } catch (error) {
              console.log('‚ö†Ô∏è Merge conflict:', error.message);
            }

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî NOTIFICACIONES POR CORREO ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: Enviar correo de √©xito
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port:    ${{ secrets.SMTP_PORT }}
          username:       ${{ secrets.SMTP_USERNAME }}
          password:       ${{ secrets.SMTP_PASSWORD }}
          to:             ${{ secrets.NOTIFY_EMAIL }}
          subject:        "‚úÖ CI/CD exitoso en ${{ github.repository }}"
          body:           |
            üéâ La pipeline `${{ github.workflow }}` finaliz√≥ correctamente.
            Rama: `${{ github.ref }}`
          from:           "ci@${{ github.repository_owner }}.com"

      - name: Enviar correo de fallo
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port:    ${{ secrets.SMTP_PORT }}
          username:       ${{ secrets.SMTP_USERNAME }}
          password:       ${{ secrets.SMTP_PASSWORD }}
          to:             ${{ secrets.NOTIFY_EMAIL }}
          subject:        "‚ùå CI/CD fallido en ${{ github.repository }}"
          body:           |
            üö® La pipeline `${{ github.workflow }}` ha fallado.
            Revisa los logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          from:           "ci@${{ github.repository_owner }}.com"
